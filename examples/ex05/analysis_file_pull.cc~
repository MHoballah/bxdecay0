#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <string>

#include <TROOT.h>
#include <TStyle.h>
#include <TH1F.h>
#include <TF1.h>
#include <TCanvas.h>
#include <TStyle.h>
#include <TGraphErrors.h>

#ifndef __CINT__
#include "RooGlobalFunc.h"
#endif
#include "RooRealVar.h"
#include "RooDataSet.h"
#include "RooGaussian.h"
#include "RooConstVar.h"
#include "TCanvas.h"
#include "TAxis.h"
#include "RooPlot.h"
#include "RooHist.h"
using namespace RooFit ;

void analysis()
{
  /*ifstream InputFile, InputFile1, InputFile2, InputFile3, InputFile4 , InputFile_beta, InputFile_E1, InputFile_E2, InputFile_sum, InputFile_jac;
  InputFile.open ("bxdecay0_ex05_1.data");
  InputFile1.open ("bxdecay0_ex05_2.data");
  InputFile2.open ("bxdecay0_ex05_3.data");
  InputFile3.open ("bxdecay0_ex05_4.data");
  InputFile4.open ("bxdecay0_ex05_5.data");
  InputFile_beta.open ("Beta.data");
  InputFile_E1.open ("Prob_sum_E1.data");
  InputFile_E2.open ("Prob_sum_E2.data");
  InputFile_sum.open("Energy_sum.data");
  InputFile_jac.open("beta_jacobian.data");

	
  if(InputFile.is_open() && InputFile1.is_open()&& InputFile2.is_open() && InputFile3.is_open() && InputFile4.is_open()  && InputFile_beta.is_open() && InputFile_E1.is_open() && InputFile_E2.is_open() && InputFile_sum.is_open() && InputFile_jac.is_open())
    cout << "Files Opened Succefully! " << endl;
    else cerr << " Problem Openening Files!" << endl;*/
  RooRealVar e1("e1","e1",0,3, "MeV");
  RooRealVar e1_sim("e1_sim","e1_sim",0,3, "MeV");
  RooDataSet *energy1 = RooDataSet::read("bxdecay0_ex05_1.data", RooArgSet(e1_sim));

  RooRealVar e1_data("e1_data","e1_data",0,3, "MeV");
  RooRealVar w("weight", "weight", 0, 1, "");
  RooDataSet *dE1 = RooDataSet::read("Prob_sum_E1.data", RooArgSet(e1_sim,w));
  RooDataSet *weightedE1 = new RooDataSet(dE1->GetName(), dE1->GetTitle(), dE1, *dE1->get(), 0, "weight");
  weightedE1->Print();

  int nbin = 100 ;  
  e1_sim.setBins(nbin);
  TH1 *sim_e_1 = energy1->createHistogram("e1_sim", 100);
  TH1 *data_e_1 = weightedE1->createHistogram("e1_sim", 100);
  double integral = data_e_1->Integral();
  double integral_sim = sim_e_1->Integral();

  RooPlot *frame1 = e1_sim.frame(Title("Energy1"), Bins(100));
 // Create Gaussian
  RooRealVar sigma("sigma","sigma",5.52107e-01,0,3) ;
  RooRealVar mean("mean","mean",3.37354e-01,0,3) ;
  RooGaussian gauss("gauss","gauss",e1_data,mean,sigma) ;
  
  energy1->plotOn(frame1, Rescale(1/integral_sim), DataError(RooAbsData::SumW2));
  //gauss.plotOn(frame1);
  weightedE1->plotOn(frame1, Rescale(1/integral), DataError(RooAbsData::SumW2),MarkerColor(kBlue),LineColor(kBlue));
 
  // C a l c u l a t e   c h i ^ 2 
  // ------------------------------

  // Show the chi^2 of the curve w.r.t. the histogram
  // If multiple curves or datasets live in the frame you can specify
  // the name of the relevant curve and/or dataset in chiSquare()
  //cout << "chi^2 = " << frame1->chiSquare() << endl ;


  // S h o w   r e s i d u a l   a n d   p u l l   d i s t s
  // -------------------------------------------------------

  // Construct a histogram with the residuals of the data w.r.t. the curve
  //  RooHist* hresid = frame1->residHist() ;

  // Construct a histogram with the pulls of the data w.r.t the curve
  //  RooHist* hpull = frame1->pullHist() ;

  // Create a new frame to draw the residual distribution and add the distribution to the frame
  //  RooPlot* frame2 = e1_sim.frame(Title("Residual Distribution")) ;
  //frame2->addPlotable(hresid,"P") ;

  // Create a new frame to draw the pull distribution and add the distribution to the frame
  //RooPlot* frame3 = e1_sim.frame(Title("Pull Distribution")) ;
  //  frame3->addPlotable(hpull,"P") ;
  
  TCanvas* c = new TCanvas("Energy1","Energy1") ;
  c->Divide(3) ;
  c->cd(1) ; gPad->SetLeftMargin(0.15) ; frame1->GetYaxis()->SetTitleOffset(1.6) ; frame1->Draw() ;
  //c->cd(2) ; gPad->SetLeftMargin(0.15) ; frame2->GetYaxis()->SetTitleOffset(1.6) ; frame2->Draw() ;
  //c->cd(3) ; gPad->SetLeftMargin(0.15) ; frame3->GetYaxis()->SetTitleOffset(1.6) ; frame3->Draw() ;
  
}
